{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e2df0ca2-f61d-4336-ba4c-abb4810b4372",
   "metadata": {},
   "source": [
    "# Importing data and saving data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "349d3e14-610c-4ad3-b157-6f05612706fa",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "af90b58a-0dc7-4c64-8839-7e87fc706fc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.core.options.set_options at 0x7f45b2901650>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import spatial_data\n",
    "from skimage.io import imread\n",
    "import pandas as pd\n",
    "import xarray as xr\n",
    "xr.set_options(display_style='text')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "598c8966-9b8f-43dc-bc2b-c38a07243af0",
   "metadata": {},
   "source": [
    "## Importing raw data\n",
    "\n",
    "Spatial data implements useful accessors that complement `xarray.Dataset` objects. In order to use them we hence need to convert our image data to `xarray` objects. Here, we assume that our data comes in form of a `tiff` files. To read them into our session we use the `skimage` imread function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "68dd0f5c-16c6-461a-b116-c3d25c11235e",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_image = imread('../../tests/test_files/input.tiff')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44f25306-ee78-4471-bb85-751036ecf167",
   "metadata": {},
   "source": [
    "By inspecting the `shape` of our image we see that it contains 5 channels and 500 pixels in `x,y` directions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f1a12dc1-3045-4fde-931e-4b8a049928eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 500, 500)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_image.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da072b2a-259f-4dae-8060-4ad7616b8e4a",
   "metadata": {},
   "source": [
    "To obtain an `xarray` object that is compatible with `spatial_data` we pass the image to the `spatial_data.load_image_data` function. The `channel_coords` argument enables us pass the appropriate channel names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "306a4717-fa1d-4f53-b888-cc253b9ee741",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = spatial_data.load_image_data(test_image, channel_coords=['Hoechst', 'CD4', 'CD8', 'FOXP3', 'BCL6'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47a3213e-c7b6-4cbd-bf17-4f761eab902d",
   "metadata": {},
   "source": [
    "`spatial_data.load_image_data` returns an xarray object that we can simply inspect by calling in an jupyter cell. Note that the image is stored as the data variable `_image`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c79fc559-9704-4c38-a521-484ab37d0b26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:   (channels: 5, y: 500, x: 500)\n",
       "Coordinates:\n",
       "  * channels  (channels) &lt;U7 &#x27;Hoechst&#x27; &#x27;CD4&#x27; &#x27;CD8&#x27; &#x27;FOXP3&#x27; &#x27;BCL6&#x27;\n",
       "  * y         (y) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n",
       "  * x         (x) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n",
       "Data variables:\n",
       "    _image    (channels, y, x) uint16 10816 12359 14504 10965 ... 147 129 149 59</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:   (channels: 5, y: 500, x: 500)\n",
       "Coordinates:\n",
       "  * channels  (channels) <U7 'Hoechst' 'CD4' 'CD8' 'FOXP3' 'BCL6'\n",
       "  * y         (y) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n",
       "  * x         (x) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n",
       "Data variables:\n",
       "    _image    (channels, y, x) uint16 10816 12359 14504 10965 ... 147 129 149 59"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5478c79-7005-4e29-a651-c9204b1a734b",
   "metadata": {},
   "source": [
    "## Adding a segmentation mask\n",
    "\n",
    "We may have a segmentation mask for our image ready. To make use of it we can add it to our `img` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fc8ce031-39d3-4318-94ed-dddacdf71fb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "seg = imread('../../tests/test_files/segmentation.tiff')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91b52e79-0644-4d47-b9bd-c3575e5e7148",
   "metadata": {},
   "source": [
    "It is important to note that the dimensions of the segmentation mask has to match the `x` and `y` dimension of our original image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "129eb621-1a23-4216-80ba-f64fa7191500",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(500, 500)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seg.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9d10d75-87ab-46e0-8a84-1489566a8865",
   "metadata": {},
   "source": [
    "Now, to add the segmentation mask we call the `pp.add_segmentation` accessor. This will append the the segmentation mask to our image object and store it under the data variable `_segmentation`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "08540236-b128-4f01-9dc0-70a8763ba6a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = img.pp.add_segmentation(seg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7154f839-bd9b-4311-ba9c-2c8c0a14b255",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:        (channels: 5, y: 500, x: 500, cells: 3640)\n",
       "Coordinates:\n",
       "  * channels       (channels) &lt;U7 &#x27;Hoechst&#x27; &#x27;CD4&#x27; &#x27;CD8&#x27; &#x27;FOXP3&#x27; &#x27;BCL6&#x27;\n",
       "  * y              (y) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * x              (x) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * cells          (cells) int64 12 77 91 158 ... 218763 218775 218790 218917\n",
       "Data variables:\n",
       "    _image         (channels, y, x) uint16 10816 12359 14504 ... 129 149 59\n",
       "    _segmentation  (y, x) int32 63194 63194 63194 63194 ... 59633 59633 59633</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:        (channels: 5, y: 500, x: 500, cells: 3640)\n",
       "Coordinates:\n",
       "  * channels       (channels) <U7 'Hoechst' 'CD4' 'CD8' 'FOXP3' 'BCL6'\n",
       "  * y              (y) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * x              (x) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * cells          (cells) int64 12 77 91 158 ... 218763 218775 218790 218917\n",
       "Data variables:\n",
       "    _image         (channels, y, x) uint16 10816 12359 14504 ... 129 149 59\n",
       "    _segmentation  (y, x) int32 63194 63194 63194 63194 ... 59633 59633 59633"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cdec8e8-13d6-4ed2-8457-2555b1e4a580",
   "metadata": {},
   "source": [
    "Taking a closer look at the `img` object, we find that new coordinates `cells` were added."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "330df0ff-4931-4eeb-a0fd-a03b91a80ebf",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Adding observations (`_obs` table)\n",
    "\n",
    "Metadata associated with each region defined in the segmentation mask may be easily added to the `xarray` dataset using the `pp.add_observations` function. Internally, this function makes use of `skimage.measure.regionprops_table` and will add an additional data table `_obs` to the `xarray.Dataset`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3e766677-d14d-4f98-a078-1f78b07de498",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "img = img.pp.add_observations(['area', 'centroid']) # adds area centroid coordinates to the obs table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f3307f6-af41-44fb-8fe1-a7429fe07935",
   "metadata": {},
   "source": [
    "## Adding cell type annotations\n",
    "\n",
    "Finally, we may want to add cell type annotations that assign unique labels to each segmented object of our image. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "98d90466-ee3b-4a2f-94d4-72cd29554df8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('../../tests/test_files/labels.csv', index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bdf01d88-dde8-4824-8d4b-a9a6da0f9e7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cell</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cell  label\n",
       "0     1      5\n",
       "1     3      1\n",
       "2     4      2\n",
       "3     6      5\n",
       "4     7      5"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "42d1bff0-c7fe-4fac-b996-ef8f552d15d2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5,  1,  2, 11,  4,  9, 10,  7,  8,  6,  3,  0])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.label.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abb6705f-d122-48a8-a067-3c54ca52aeb9",
   "metadata": {},
   "source": [
    "Currently the addition of cell type labels is only supported via `pandas` dataframes. This dataframe must specify the cell numbers and the label of the respective cell. Labels must be consecutive integers, starting from 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "14cd92ad-d036-4291-ba53-14fadc49c14e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Found 0 in labels. Reindexing ...\n"
     ]
    }
   ],
   "source": [
    "img = img.pp.add_labels(df, cell_col='cell', label_col='label')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "586b4c93-523d-42d0-b484-12953abe9d4c",
   "metadata": {},
   "source": [
    "Adding cell type labels adds yet another coordinate `labels` to the `xarray` dataset object. Additionally, the data variable `_labels` is stored which holds meta information about the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f0b61d7b-b8a3-42eb-9a32-b284a54e56e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:        (labels: 12, props: 2, channels: 5, y: 500, x: 500,\n",
       "                    cells: 3380, features: 5)\n",
       "Coordinates:\n",
       "  * labels         (labels) int64 1 2 3 4 5 6 7 8 9 10 11 12\n",
       "  * props          (props) &lt;U6 &#x27;_color&#x27; &#x27;_name&#x27;\n",
       "  * channels       (channels) &lt;U7 &#x27;Hoechst&#x27; &#x27;CD4&#x27; &#x27;CD8&#x27; &#x27;FOXP3&#x27; &#x27;BCL6&#x27;\n",
       "  * y              (y) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * x              (x) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * cells          (cells) int64 12 77 91 158 ... 218634 218740 218775 218790\n",
       "  * features       (features) &lt;U16 &#x27;_labels&#x27; &#x27;_original_labels&#x27; ... &#x27;centroid-1&#x27;\n",
       "Data variables:\n",
       "    _labels        (labels, props) object &#x27;#7A4900&#x27; ... &#x27;Cell type 12&#x27;\n",
       "    _image         (channels, y, x) uint16 10816 12359 14504 ... 129 149 59\n",
       "    _segmentation  (y, x) int32 63194 63194 63194 63194 ... 59633 59633 59633\n",
       "    _obs           (cells, features) float64 5.0 4.0 61.0 ... 17.0 491.4 73.59</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:        (labels: 12, props: 2, channels: 5, y: 500, x: 500,\n",
       "                    cells: 3380, features: 5)\n",
       "Coordinates:\n",
       "  * labels         (labels) int64 1 2 3 4 5 6 7 8 9 10 11 12\n",
       "  * props          (props) <U6 '_color' '_name'\n",
       "  * channels       (channels) <U7 'Hoechst' 'CD4' 'CD8' 'FOXP3' 'BCL6'\n",
       "  * y              (y) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * x              (x) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * cells          (cells) int64 12 77 91 158 ... 218634 218740 218775 218790\n",
       "  * features       (features) <U16 '_labels' '_original_labels' ... 'centroid-1'\n",
       "Data variables:\n",
       "    _labels        (labels, props) object '#7A4900' ... 'Cell type 12'\n",
       "    _image         (channels, y, x) uint16 10816 12359 14504 ... 129 149 59\n",
       "    _segmentation  (y, x) int32 63194 63194 63194 63194 ... 59633 59633 59633\n",
       "    _obs           (cells, features) float64 5.0 4.0 61.0 ... 17.0 491.4 73.59"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10818a7e-5819-4285-a4dd-dca1bbf1f61d",
   "metadata": {},
   "source": [
    "## Loading data all data at once\n",
    "\n",
    "As a side note, it is also possible to set up the spatial data `xarray` object simply by providing the segmentation and cell type labels to the `spatial_data.load_image_data` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fa1e93b6-5e8b-4bdf-be66-68c6af5c535d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Found 0 in labels. Reindexing ...\n"
     ]
    }
   ],
   "source": [
    "img2 = spatial_data.load_image_data(test_image, channel_coords=['Hoechst', 'CD4', 'CD8', 'FOXP3', 'BCL6'], segmentation=seg, labels=df, cell_col='cell', label_col='label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "059d1af0-f6b0-4864-8ee7-b03a2b17112b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:        (labels: 12, props: 2, channels: 5, y: 500, x: 500,\n",
       "                    cells: 3380, features: 4)\n",
       "Coordinates:\n",
       "  * labels         (labels) int64 1 2 3 4 5 6 7 8 9 10 11 12\n",
       "  * props          (props) &lt;U6 &#x27;_color&#x27; &#x27;_name&#x27;\n",
       "  * channels       (channels) &lt;U7 &#x27;Hoechst&#x27; &#x27;CD4&#x27; &#x27;CD8&#x27; &#x27;FOXP3&#x27; &#x27;BCL6&#x27;\n",
       "  * y              (y) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * x              (x) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * cells          (cells) int64 12 77 91 158 ... 218634 218740 218775 218790\n",
       "  * features       (features) &lt;U16 &#x27;_labels&#x27; &#x27;_original_labels&#x27; ... &#x27;centroid-1&#x27;\n",
       "Data variables:\n",
       "    _labels        (labels, props) object &#x27;#886F4C&#x27; ... &#x27;Cell type 12&#x27;\n",
       "    _image         (channels, y, x) uint16 10816 12359 14504 ... 129 149 59\n",
       "    _segmentation  (y, x) int32 63194 63194 63194 63194 ... 59633 59633 59633\n",
       "    _obs           (cells, features) float64 5.0 4.0 139.8 ... 7.0 491.4 73.59</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:        (labels: 12, props: 2, channels: 5, y: 500, x: 500,\n",
       "                    cells: 3380, features: 4)\n",
       "Coordinates:\n",
       "  * labels         (labels) int64 1 2 3 4 5 6 7 8 9 10 11 12\n",
       "  * props          (props) <U6 '_color' '_name'\n",
       "  * channels       (channels) <U7 'Hoechst' 'CD4' 'CD8' 'FOXP3' 'BCL6'\n",
       "  * y              (y) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * x              (x) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n",
       "  * cells          (cells) int64 12 77 91 158 ... 218634 218740 218775 218790\n",
       "  * features       (features) <U16 '_labels' '_original_labels' ... 'centroid-1'\n",
       "Data variables:\n",
       "    _labels        (labels, props) object '#886F4C' ... 'Cell type 12'\n",
       "    _image         (channels, y, x) uint16 10816 12359 14504 ... 129 149 59\n",
       "    _segmentation  (y, x) int32 63194 63194 63194 63194 ... 59633 59633 59633\n",
       "    _obs           (cells, features) float64 5.0 4.0 139.8 ... 7.0 491.4 73.59"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dbf4899-b4dc-4e81-9e4d-76890622a70d",
   "metadata": {},
   "source": [
    "## Saving data\n",
    "\n",
    "To save our data object we simply invoke the `xarray.to_zarr` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f558a66a-3a2f-46c5-80b1-f054cae7c762",
   "metadata": {},
   "outputs": [],
   "source": [
    "img.to_zarr('/home/voehring/voehring/notebooks/small_image.zarr')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pymc",
   "language": "python",
   "name": "pymc"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
