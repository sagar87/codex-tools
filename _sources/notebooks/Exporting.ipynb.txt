{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exporting Data\n",
    "\n",
    "Once you are happy with your analysis, you will likely want to export the results. The easiest way to do this is by using the `zarr` format, but `csv`, `anndata`, and `spatialdata` are also supported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.core.options.set_options at 0x7fffe40ebc10>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import spatialproteomics\n",
    "import pandas as pd\n",
    "import xarray as xr\n",
    "import os\n",
    "import shutil\n",
    "import anndata\n",
    "xr.set_options(display_style='text')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/meyerben/meyerben/.conda/envs/spatialproteomics_env/lib/python3.9/site-packages/xarray/backends/plugins.py:159: RuntimeWarning: 'netcdf4' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n",
      "/home/meyerben/meyerben/.conda/envs/spatialproteomics_env/lib/python3.9/site-packages/xarray/backends/plugins.py:159: RuntimeWarning: 'scipy' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:                         (cells: 12560, channels: 56, y: 3000,\n",
       "                                     x: 3000, labels: 9, props: 2, features: 7)\n",
       "Coordinates:\n",
       "  * cells                           (cells) int64 1 2 3 4 ... 12558 12559 12560\n",
       "  * channels                        (channels) &lt;U11 &#x27;DAPI&#x27; &#x27;Helios&#x27; ... &#x27;Ki-67&#x27;\n",
       "  * features                        (features) &lt;U14 &#x27;CD3_binarized&#x27; ... &#x27;cent...\n",
       "  * labels                          (labels) int64 1 2 3 4 5 6 7 8 9\n",
       "  * props                           (props) &lt;U6 &#x27;_color&#x27; &#x27;_name&#x27;\n",
       "  * x                               (x) int64 0 1 2 3 4 ... 2996 2997 2998 2999\n",
       "  * y                               (y) int64 0 1 2 3 4 ... 2996 2997 2998 2999\n",
       "Data variables:\n",
       "    _arcsinh_mean                   (cells, channels) float64 3.111 ... 0.4174\n",
       "    _arcsinh_sum                    (cells, channels) float64 8.346 ... 5.224\n",
       "    _image                          (channels, y, x) uint8 4 4 4 4 5 ... 2 2 2 2\n",
       "    _labels                         (labels, props) object &#x27;#C8A1A1&#x27; &#x27;B&#x27; ... &#x27;T&#x27;\n",
       "    _obs                            (cells, features) float64 1.0 ... 2.237e+03\n",
       "    _percentage_positive_intensity  (cells, channels) float64 1.0 0.0 ... 1.0\n",
       "    _raw_mean                       (cells, channels) float64 56.02 ... 2.148\n",
       "    _raw_sum                        (cells, channels) float64 1.053e+04 ... 4...\n",
       "    _segmentation                   (y, x) int64 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:                         (cells: 12560, channels: 56, y: 3000,\n",
       "                                     x: 3000, labels: 9, props: 2, features: 7)\n",
       "Coordinates:\n",
       "  * cells                           (cells) int64 1 2 3 4 ... 12558 12559 12560\n",
       "  * channels                        (channels) <U11 'DAPI' 'Helios' ... 'Ki-67'\n",
       "  * features                        (features) <U14 'CD3_binarized' ... 'cent...\n",
       "  * labels                          (labels) int64 1 2 3 4 5 6 7 8 9\n",
       "  * props                           (props) <U6 '_color' '_name'\n",
       "  * x                               (x) int64 0 1 2 3 4 ... 2996 2997 2998 2999\n",
       "  * y                               (y) int64 0 1 2 3 4 ... 2996 2997 2998 2999\n",
       "Data variables:\n",
       "    _arcsinh_mean                   (cells, channels) float64 3.111 ... 0.4174\n",
       "    _arcsinh_sum                    (cells, channels) float64 8.346 ... 5.224\n",
       "    _image                          (channels, y, x) uint8 4 4 4 4 5 ... 2 2 2 2\n",
       "    _labels                         (labels, props) object '#C8A1A1' 'B' ... 'T'\n",
       "    _obs                            (cells, features) float64 1.0 ... 2.237e+03\n",
       "    _percentage_positive_intensity  (cells, channels) float64 1.0 0.0 ... 1.0\n",
       "    _raw_mean                       (cells, channels) float64 56.02 ... 2.148\n",
       "    _raw_sum                        (cells, channels) float64 1.053e+04 ... 4...\n",
       "    _segmentation                   (y, x) int64 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading a test file which we will export later\n",
    "# notice how easy it is to load the file from a zarr using xarray\n",
    "ds = xr.load_dataset('../../data/tmp.zarr')\n",
    "ds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exporting to Zarr\n",
    "This is the easiest file format to work with. It allows you to store and load the xarray objects with a single line of code. \n",
    "\n",
    "In case there are issues with simply running `ds.to_zarr(\"your_path.zarr\")`, you might need to parse the dtypes correctly. This is a [known issue](https://github.com/pydata/xarray/issues/3476) with xarray and will hopefully be fixed soon."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# parsing as unicode (only necessary if ds.to_zarr() does not work out of the box)\n",
    "for v in list(ds.coords.keys()):\n",
    "    if ds.coords[v].dtype == object:\n",
    "        ds.coords[v] = ds.coords[v].astype(\"unicode\")\n",
    "\n",
    "for v in list(ds.variables.keys()):\n",
    "    if ds[v].dtype == object:\n",
    "        ds[v] = ds[v].astype(\"unicode\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.backends.zarr.ZarrStore at 0x7ffcc2566440>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zarr_path = \"tmp.zarr\"\n",
    "\n",
    "# removing the zarr if it exists\n",
    "if os.path.exists(zarr_path):\n",
    "    shutil.rmtree(zarr_path)\n",
    "\n",
    "# exporting as zarr\n",
    "ds.to_zarr(\"tmp.zarr\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exporting Tables to CSV\n",
    "Let's say you want to export some tables as csvs. This can be done with pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DAPI</th>\n",
       "      <th>Helios</th>\n",
       "      <th>CD10</th>\n",
       "      <th>TCF7/TCF1</th>\n",
       "      <th>PD-L1</th>\n",
       "      <th>BCL-6</th>\n",
       "      <th>FOXP3</th>\n",
       "      <th>CD69</th>\n",
       "      <th>Perforin</th>\n",
       "      <th>CD19</th>\n",
       "      <th>...</th>\n",
       "      <th>CD68</th>\n",
       "      <th>CD31</th>\n",
       "      <th>CD45</th>\n",
       "      <th>CD3</th>\n",
       "      <th>Cytokeratin</th>\n",
       "      <th>CD45RO</th>\n",
       "      <th>CD8</th>\n",
       "      <th>Granyzme B</th>\n",
       "      <th>CD79a</th>\n",
       "      <th>Ki-67</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.111332</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.391040</td>\n",
       "      <td>1.532299</td>\n",
       "      <td>1.700792</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.026824</td>\n",
       "      <td>0.029783</td>\n",
       "      <td>...</td>\n",
       "      <td>0.345229</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.018150</td>\n",
       "      <td>2.460342</td>\n",
       "      <td>0.595998</td>\n",
       "      <td>1.719421</td>\n",
       "      <td>0.714288</td>\n",
       "      <td>0.428276</td>\n",
       "      <td>0.528275</td>\n",
       "      <td>0.458260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.804985</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.168321</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.395341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.847262</td>\n",
       "      <td>0.002073</td>\n",
       "      <td>...</td>\n",
       "      <td>1.559274</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.294762</td>\n",
       "      <td>0.303109</td>\n",
       "      <td>0.642876</td>\n",
       "      <td>1.328594</td>\n",
       "      <td>0.799208</td>\n",
       "      <td>2.029083</td>\n",
       "      <td>0.426344</td>\n",
       "      <td>0.528429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.380220</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.733945</td>\n",
       "      <td>0.666575</td>\n",
       "      <td>2.020150</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.066995</td>\n",
       "      <td>1.397469</td>\n",
       "      <td>0.013636</td>\n",
       "      <td>...</td>\n",
       "      <td>0.822320</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.412199</td>\n",
       "      <td>2.153628</td>\n",
       "      <td>0.763425</td>\n",
       "      <td>2.767838</td>\n",
       "      <td>1.036900</td>\n",
       "      <td>0.571746</td>\n",
       "      <td>0.727335</td>\n",
       "      <td>0.497415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.987283</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.297533</td>\n",
       "      <td>0.607904</td>\n",
       "      <td>1.572571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.003597</td>\n",
       "      <td>0.960472</td>\n",
       "      <td>0.004317</td>\n",
       "      <td>...</td>\n",
       "      <td>0.297740</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.242867</td>\n",
       "      <td>2.149749</td>\n",
       "      <td>0.583574</td>\n",
       "      <td>2.473159</td>\n",
       "      <td>0.804046</td>\n",
       "      <td>0.425201</td>\n",
       "      <td>0.427177</td>\n",
       "      <td>0.436378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3.120023</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.542808</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.928561</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.155537</td>\n",
       "      <td>1.463069</td>\n",
       "      <td>0.010959</td>\n",
       "      <td>...</td>\n",
       "      <td>0.872304</td>\n",
       "      <td>0.079369</td>\n",
       "      <td>1.005996</td>\n",
       "      <td>0.212105</td>\n",
       "      <td>0.894870</td>\n",
       "      <td>2.299642</td>\n",
       "      <td>0.743329</td>\n",
       "      <td>0.518868</td>\n",
       "      <td>1.011288</td>\n",
       "      <td>0.488958</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       DAPI  Helios      CD10  TCF7/TCF1     PD-L1  BCL-6  FOXP3      CD69  \\\n",
       "1  3.111332     0.0  1.391040   1.532299  1.700792    0.0    0.0  0.000000   \n",
       "2  2.804985     0.0  1.168321   0.000000  1.395341    0.0    0.0  0.000000   \n",
       "3  3.380220     0.0  1.733945   0.666575  2.020150    0.0    0.0  0.066995   \n",
       "4  2.987283     0.0  1.297533   0.607904  1.572571    0.0    0.0  0.003597   \n",
       "5  3.120023     0.0  1.542808   0.000000  1.928561    0.0    0.0  0.155537   \n",
       "\n",
       "   Perforin      CD19  ...      CD68      CD31      CD45       CD3  \\\n",
       "1  1.026824  0.029783  ...  0.345229  0.000000  2.018150  2.460342   \n",
       "2  0.847262  0.002073  ...  1.559274  0.000000  1.294762  0.303109   \n",
       "3  1.397469  0.013636  ...  0.822320  0.000000  1.412199  2.153628   \n",
       "4  0.960472  0.004317  ...  0.297740  0.000000  1.242867  2.149749   \n",
       "5  1.463069  0.010959  ...  0.872304  0.079369  1.005996  0.212105   \n",
       "\n",
       "   Cytokeratin    CD45RO       CD8  Granyzme B     CD79a     Ki-67  \n",
       "1     0.595998  1.719421  0.714288    0.428276  0.528275  0.458260  \n",
       "2     0.642876  1.328594  0.799208    2.029083  0.426344  0.528429  \n",
       "3     0.763425  2.767838  1.036900    0.571746  0.727335  0.497415  \n",
       "4     0.583574  2.473159  0.804046    0.425201  0.427177  0.436378  \n",
       "5     0.894870  2.299642  0.743329    0.518868  1.011288  0.488958  \n",
       "\n",
       "[5 rows x 56 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = ds.pp.get_layer_as_df(\"_arcsinh_mean\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# exporting as csv\n",
    "df.to_csv(\"tmp.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exporting to AnnData\n",
    "AnnData is a format used by scanpy, which can be useful to create interesting plots and downstream analyses. For this reason, you can export the xarray object as an AnnData object. Note that this object will only store the tabular data, but not the image or the segmentation layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 12560 × 56\n",
       "    obs: 'centroid-0', 'centroid-1', '_labels', '_original_'\n",
       "    uns: 'label_colors'\n",
       "    layers: 'arcsinh_sum', 'raw_mean', 'raw_sum'"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# putting the expression matrix into an anndata object\n",
    "adata = ds.ext.convert_to_anndata(expression_matrix_key=\"_arcsinh_mean\", \n",
    "                                  additional_layers={\"arcsinh_sum\": \"_arcsinh_sum\", \"raw_mean\": \"_raw_mean\", \"raw_sum\": \"_raw_sum\"}, \n",
    "                                  additional_uns={\"label_colors\": \"_labels\"})\n",
    "adata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# writing to disk as hdf5\n",
    "adata.write('tmp.h5ad')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exporting to SpatialData\n",
    "SpatialData is a data format which is commonly used for spatial omics analysis and combines the power of zarr with anndata. You can export to this data format as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[34mINFO    \u001b[0m Transposing `data` of type: \u001b[1m<\u001b[0m\u001b[1;95mclass\u001b[0m\u001b[39m \u001b[0m\u001b[32m'dask.array.core.Array'\u001b[0m\u001b[1m>\u001b[0m to \u001b[1m(\u001b[0m\u001b[32m'c'\u001b[0m, \u001b[32m'y'\u001b[0m, \u001b[32m'x'\u001b[0m\u001b[1m)\u001b[0m.                           \n",
      "\u001b[34mINFO    \u001b[0m Transposing `data` of type: \u001b[1m<\u001b[0m\u001b[1;95mclass\u001b[0m\u001b[39m \u001b[0m\u001b[32m'dask.array.core.Array'\u001b[0m\u001b[1m>\u001b[0m to \u001b[1m(\u001b[0m\u001b[32m'y'\u001b[0m, \u001b[32m'x'\u001b[0m\u001b[1m)\u001b[0m.                                \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SpatialData object with:\n",
       "├── Images\n",
       "│     └── 'image': SpatialImage[cyx] (56, 3000, 3000)\n",
       "├── Labels\n",
       "│     └── 'segmentation': SpatialImage[yx] (3000, 3000)\n",
       "└── Table\n",
       "      └── AnnData object with n_obs × n_vars = 12560 × 56\n",
       "    obs: 'id', 'region'\n",
       "    uns: 'spatialdata_attrs': AnnData (12560, 56)\n",
       "with coordinate systems:\n",
       "▸ 'global', with elements:\n",
       "        image (Images), segmentation (Labels)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spatialdata_object = ds.ext.convert_to_spatialdata(expression_matrix_key=\"_arcsinh_mean\")\n",
    "spatialdata_object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "root_attr: channels_metadata\n",
      "root_attr: multiscales\n",
      "datasets [{'coordinateTransformations': [{'scale': [1.0, 1.0, 1.0], 'type': 'scale'}], 'path': '0'}]\n",
      "resolution: 0\n",
      " - shape ('c', 'y', 'x') = (56, 3000, 3000)\n",
      " - chunks =  ['56', '1548 (+ 1452)', '1548 (+ 1452)']\n",
      " - dtype = uint8\n",
      "root_attr: image-label\n",
      "root_attr: multiscales\n",
      "no parent found for <ome_zarr.reader.Label object at 0x7fffc1abe670>: None\n",
      "root_attr: image-label\n",
      "root_attr: multiscales\n",
      "datasets [{'coordinateTransformations': [{'scale': [1.0, 1.0], 'type': 'scale'}], 'path': '0'}]\n",
      "resolution: 0\n",
      " - shape ('y', 'x') = (3000, 3000)\n",
      " - chunks =  ['3000', '3000']\n",
      " - dtype = int64\n"
     ]
    }
   ],
   "source": [
    "# storing as zarr file\n",
    "spatialdata_object.write(\"tmp.zarr\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
